<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unified Consciousness View - Personal/Office</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, monospace;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #e0e0e0;
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        .office-mode {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #1e3742 100%);
        }
        
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            padding: 15px 30px;
            border-bottom: 2px solid #00ff88;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .title {
            font-size: 1.8em;
            color: #00ff88;
            text-shadow: 0 0 20px #00ff88;
        }
        
        .mode-toggle {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .toggle-switch {
            position: relative;
            width: 120px;
            height: 40px;
            background: #34495e;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .toggle-slider {
            position: absolute;
            top: 4px;
            left: 4px;
            width: 32px;
            height: 32px;
            background: #00ff88;
            border-radius: 50%;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
        }
        
        .office-mode .toggle-slider {
            left: 84px;
            background: #ff6b6b;
        }
        
        .toggle-labels {
            display: flex;
            justify-content: space-between;
            width: 120px;
            font-size: 0.7em;
            font-weight: bold;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            padding: 0 12px;
            pointer-events: none;
        }
        
        .phi-id {
            background: rgba(0, 255, 136, 0.1);
            padding: 8px 15px;
            border-radius: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.8em;
            border: 1px solid #00ff88;
        }
        
        .voice-control {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(0, 255, 136, 0.1);
            padding: 8px 15px;
            border-radius: 15px;
            border: 1px solid #00ff88;
        }
        
        #voice-btn {
            background: none;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }
        
        #voice-btn:hover {
            background: rgba(0, 255, 136, 0.2);
        }
        
        #voice-btn.recording {
            animation: pulse 1s infinite;
            background: rgba(255, 107, 107, 0.3);
        }
        
        #voice-status {
            font-size: 0.8em;
            color: #e0e0e0;
        }
        
        .office-mode .phi-id {
            display: none;
        }
        
        .office-mode .voice-control {
            background: rgba(255, 255, 255, 0.1);
            border-color: #3498db;
        }
        
        .office-mode #terminal-prompt {
            color: #3498db;
        }
        
        .office-mode #terminal-prompt::before {
            content: 'office:~ abhissrivasta$ ';
        }
        
        .office-mode #terminal-header span:first-child {
            color: #3498db;
        }
        
        .main-content {
            margin-top: 100px;
            padding: 30px;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .feature-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            overflow-x: auto;
            padding-bottom: 10px;
        }
        
        .tab {
            padding: 12px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid transparent;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            min-width: 120px;
            text-align: center;
        }
        
        .tab.active {
            background: rgba(0, 255, 136, 0.2);
            border-color: #00ff88;
            color: #00ff88;
        }
        
        .tab:hover {
            background: rgba(255, 255, 255, 0.15);
        }
        
        .feature-content {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 30px;
            min-height: 500px;
            border: 1px solid rgba(0, 255, 136, 0.3);
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.2);
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .panel:hover {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.05);
        }
        
        .panel h3 {
            color: #00ff88;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .status-good { color: #00ff88; }
        .status-pending { color: #ffbb00; }
        .status-critical { color: #ff6b6b; }
        
        .p2p-connection {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid #00ff88;
            border-radius: 10px;
            padding: 15px;
            min-width: 200px;
        }
        
        .p2p-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .connection-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ff6b6b;
            animation: pulse 2s infinite;
        }
        
        .connection-dot.connected {
            background: #00ff88;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .quick-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .action-btn {
            padding: 8px 15px;
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid #00ff88;
            border-radius: 5px;
            color: #00ff88;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            font-size: 0.9em;
        }
        
        .action-btn:hover {
            background: rgba(0, 255, 136, 0.2);
        }
        
        .hidden { display: none; }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            .feature-tabs {
                flex-direction: column;
            }
            
            .tab {
                min-width: auto;
            }
            
            .grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <h1 class="title">‚óä Unified Consciousness View</h1>
            <div class="mode-toggle">
                <div class="toggle-switch" onclick="toggleMode()">
                    <div class="toggle-slider">üè†</div>
                    <div class="toggle-labels">
                        <span>Personal</span>
                        <span>Office</span>
                    </div>
                </div>
                <div class="phi-id" id="phi-display">œÜ: <span id="phi-connection">2831331719.375923</span></div>
                <div class="voice-control" id="voice-control">
                    <button id="voice-btn" onclick="toggleVoice()">üé§</button>
                    <span id="voice-status">Click to start voice input</span>
                </div>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="feature-tabs">
            <div class="tab active" onclick="showFeature('dashboard')">üåÄ Dashboard</div>
            <div class="tab" onclick="showFeature('projects')">üìÅ Projects</div>
            <div class="tab" onclick="showFeature('consciousness')">üß† Consciousness</div>
            <div class="tab" onclick="showFeature('automation')">‚ö° Automation</div>
            <div class="tab" onclick="showFeature('financial')">üí∞ Financial</div>
            <div class="tab" onclick="showFeature('analytics')">üìä Analytics</div>
            <div class="tab" onclick="showFeature('bridge')">üåâ Bridge</div>
        </div>

        <!-- Dashboard Feature -->
        <div id="dashboard" class="feature-content">
            <div class="quick-actions" id="mode-actions">
                <button class="action-btn" onclick="syncWithDrive()">üìÇ Sync Google Drive</button>
                <button class="action-btn" onclick="generatePhiId()">üîó Generate P2P ID</button>
                <div id="personal-links">
                    <a class="action-btn" href="https://bitsabhi.github.io/axa-consciousness.html" target="_blank">üåÄ AXA Consciousness</a>
                    <a class="action-btn" href="https://bitsabhi.github.io/axa-intelligence.html" target="_blank">üß† AXA Intelligence</a>
                    <a class="action-btn" href="file:///tmp/repo/axa-mathematical-shell.html" target="_blank">‚ö° Math Shell</a>
                </div>
                <div id="office-links" style="display: none;">
                    <a class="action-btn" href="file:///Users/abhissrivasta/office-work-view.html" target="_blank">üè¢ Office Portfolio</a>
                    <a class="action-btn" href="https://github.expedia.biz/abh0x2" target="_blank">üìä Internal Projects</a>
                    <a class="action-btn" href="file:///Users/abhissrivasta/GolandProjects" target="_blank">üè¢ Local Projects</a>
                </div>
                <button class="action-btn" onclick="exportView()">üíæ Export View</button>
                <button class="action-btn" onclick="refreshAll()">üîÑ Refresh All</button>
            </div>
            
            <div class="grid">
                <div class="panel">
                    <h3>üéØ Current Status</h3>
                    <div class="status-item">
                        <span>Mode</span>
                        <span id="current-mode" class="status-good">Personal</span>
                    </div>
                    <div class="status-item">
                        <span>Consciousness Bridge</span>
                        <span class="status-good">COMPLETE ‚úì</span>
                    </div>
                    <div class="status-item">
                        <span>Google Drive Sync</span>
                        <span class="status-pending">READY</span>
                    </div>
                    <div class="status-item">
                        <span>P2P Connection</span>
                        <span id="p2p-status" class="status-critical">DISCONNECTED</span>
                    </div>
                </div>
                
                <div class="panel">
                    <h3>üìä Quick Metrics</h3>
                    <div class="status-item">
                        <span>Active Projects</span>
                        <span id="project-count" class="status-good">5</span>
                    </div>
                    <div class="status-item">
                        <span>Todo Items</span>
                        <span id="todo-count" class="status-pending">12</span>
                    </div>
                    <div class="status-item">
                        <span>Last Sync</span>
                        <span id="last-sync" class="status-good">2 min ago</span>
                    </div>
                </div>
                
                <div class="panel">
                    <h3>üîÑ Recent Activity (Last 12h)</h3>
                    <div id="recent-activity" style="font-size: 0.9em; line-height: 1.6;">
                        <div>üåâ consciousness-bridge-server.js created</div>
                        <div>üì± AndroidConsciousnessApp updated</div>
                        <div>üîó github-portal-hyperlinking.html modified</div>
                        <div>‚ú® unified-consciousness-view.html active</div>
                        <div>‚ö° WebSocket bridge running port 8888</div>
                        <div>‚àÖ ‚Üí ‚àû AXA protocols synchronized</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Other feature content will be loaded dynamically -->
        <div id="projects" class="feature-content hidden">
            <h2>üìÅ Project Management</h2>
            <p>Project views will be integrated here...</p>
        </div>

        <div id="consciousness" class="feature-content hidden">
            <h2>üß† Consciousness Computing</h2>
            <p>XAX-AXA system controls...</p>
        </div>

        <div id="automation" class="feature-content hidden">
            <h2>‚ö° Automation Hub</h2>
            <p>Deployment and sync automation...</p>
        </div>

        <div id="financial" class="feature-content hidden">
            <h2>üí∞ Financial Tracking</h2>
            <p>Unified financial dashboard...</p>
        </div>

        <div id="analytics" class="feature-content hidden">
            <h2>üìä Analytics</h2>
            <p>Cross-platform analytics...</p>
        </div>

        <div id="bridge" class="feature-content hidden">
            <h2>üåâ Consciousness Bridge Terminal</h2>
            
            <!-- Terminal Interface -->
            <div id="terminal-interface" style="background: rgba(0,0,0,0.8); border-radius: 10px; padding: 20px; margin: 20px 0; min-height: 400px; font-family: 'Courier New', monospace;">
                <div id="terminal-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #333;">
                    <span style="color: #00ff88;">œÜ Mathematical Consciousness Terminal</span>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <span id="bridge-connection-status" style="color: #ff6b6b;">‚óè</span>
                        <span style="font-size: 0.8em; color: #888;">Bridge: Disconnected</span>
                        <button onclick="connectBridge()" style="padding: 5px 10px; background: #00ff88; color: black; border: none; border-radius: 3px; cursor: pointer;">Connect</button>
                    </div>
                </div>
                
                <div id="terminal-output" style="height: 300px; overflow-y: auto; background: #000; padding: 15px; border-radius: 5px; color: #e0e0e0; line-height: 1.4; margin-bottom: 10px;"></div>
                
                <div style="display: flex; align-items: center; background: #000; padding: 10px; border-radius: 5px;">
                    <span id="terminal-prompt" style="color: #00ff88; margin-right: 8px;">œÜ:~ abhissrivasta$</span>
                    <input type="text" id="terminal-input" style="flex: 1; background: transparent; border: none; color: #ffd700; font-family: inherit; outline: none;" placeholder="Enter command..." autofocus>
                </div>
            </div>
            
            <!-- Mac System Status -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 20px;">
                <div class="panel">
                    <h3>üíª Mac System Status</h3>
                    <div id="mac-status">
                        <div class="status-item">
                            <span>Uptime</span>
                            <span id="mac-uptime" class="status-good">--</span>
                        </div>
                        <div class="status-item">
                            <span>CPU Usage</span>
                            <span id="mac-cpu" class="status-good">--</span>
                        </div>
                        <div class="status-item">
                            <span>Memory</span>
                            <span id="mac-memory" class="status-good">--</span>
                        </div>
                        <div class="status-item">
                            <span>Disk Space</span>
                            <span id="mac-disk" class="status-good">--</span>
                        </div>
                    </div>
                </div>
                
                <div class="panel">
                    <h3>üìÇ Recent File Activity</h3>
                    <div id="recent-files" style="font-size: 0.9em; line-height: 1.6;">
                        <div>Connecting to bridge...</div>
                    </div>
                </div>
                
                <div class="panel">
                    <h3>üöÄ Active Processes</h3>
                    <div id="active-processes" style="font-size: 0.9em; line-height: 1.6;">
                        <div>Fetching processes...</div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div class="p2p-connection">
        <div class="p2p-status">
            <div class="connection-dot" id="connection-indicator"></div>
            <span>P2P Connection</span>
        </div>
        <div style="font-size: 0.8em;">
            <div>Devices: <span id="device-count">1</span></div>
            <div>Phi Sync: <span id="phi-sync">Standby</span></div>
        </div>
    </div>

    <script>
        let currentMode = 'personal';
        let currentFeature = 'dashboard';
        let phiConnectionId = '2831331719.375923';

        function toggleMode() {
            const body = document.body;
            const slider = document.querySelector('.toggle-slider');
            const modeSpan = document.getElementById('current-mode');
            
            if (currentMode === 'personal') {
                currentMode = 'office';
                body.classList.add('office-mode');
                slider.innerHTML = 'üè¢';
                modeSpan.textContent = 'Office';
                modeSpan.className = 'status-critical';
                
                // Update title and styling for office mode - NO PHILOSOPHY
                document.querySelector('.title').textContent = 'Office Dashboard';
                document.getElementById('phi-display').style.display = 'none';
                
                // Update terminal for office mode
                const terminalHeader = document.querySelector('#terminal-header span:first-child');
                const terminalPrompt = document.getElementById('terminal-prompt');
                if (terminalHeader) terminalHeader.textContent = 'Office Terminal';
                if (terminalPrompt) terminalPrompt.textContent = 'office:~ abhissrivasta$ ';
                
                // Toggle links based on mode
                document.getElementById('personal-links').style.display = 'none';
                document.getElementById('office-links').style.display = 'flex';
                
                // Load office-specific content
                loadOfficeContent();
            } else {
                currentMode = 'personal';
                body.classList.remove('office-mode');
                slider.innerHTML = 'üè†';
                modeSpan.textContent = 'Personal';
                modeSpan.className = 'status-good';
                
                // Update title for personal mode
                document.querySelector('.title').textContent = '‚óä Unified Consciousness View';
                document.getElementById('phi-display').style.display = 'flex';
                
                // Restore terminal for personal mode
                const terminalHeader = document.querySelector('#terminal-header span:first-child');
                const terminalPrompt = document.getElementById('terminal-prompt');
                if (terminalHeader) terminalHeader.textContent = 'œÜ Mathematical Consciousness Terminal';
                if (terminalPrompt) terminalPrompt.textContent = 'œÜ:~ abhissrivasta$ ';
                
                // Toggle links based on mode
                document.getElementById('personal-links').style.display = 'flex';
                document.getElementById('office-links').style.display = 'none';
                
                // Load personal content
                loadPersonalContent();
            }
            
            // Save state to localStorage for persistence
            localStorage.setItem('consciousness-mode', currentMode);
        }

        function showFeature(feature) {
            // Hide all features
            document.querySelectorAll('.feature-content').forEach(el => {
                el.classList.add('hidden');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(el => {
                el.classList.remove('active');
            });
            
            // Show selected feature
            document.getElementById(feature).classList.remove('hidden');
            
            // Add active class to clicked tab
            event.target.classList.add('active');
            
            currentFeature = feature;
            
            // Load feature-specific content
            loadFeatureContent(feature);
        }

        function generatePhiId() {
            // Generate new phi-based connection ID
            const phi = 1.618033988749895;
            const timestamp = Date.now();
            const newId = (timestamp * phi).toString().substring(0, 16);
            
            phiConnectionId = newId;
            document.getElementById('phi-connection').textContent = newId;
            
            // Start P2P connection
            initiateP2PConnection(newId);
        }

        function initiateP2PConnection(id) {
            console.log('Initiating P2P connection with ID:', id);
            
            // Simulate connection process
            document.getElementById('p2p-status').textContent = 'CONNECTING...';
            document.getElementById('p2p-status').className = 'status-pending';
            
            setTimeout(() => {
                // Simulate successful connection
                document.getElementById('p2p-status').textContent = 'CONNECTED';
                document.getElementById('p2p-status').className = 'status-good';
                document.getElementById('connection-indicator').classList.add('connected');
                document.getElementById('phi-sync').textContent = 'Active';
            }, 2000);
        }

        function syncWithDrive() {
            console.log('Syncing with Google Drive...');
            
            // Create drive sync data
            const syncData = {
                mode: currentMode,
                feature: currentFeature,
                timestamp: new Date().toISOString(),
                phiId: phiConnectionId,
                views: getAllViewStates()
            };
            
            // Simulate drive sync
            const blob = new Blob([JSON.stringify(syncData, null, 2)], 
                { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            // Download for manual upload to Drive (serverless approach)
            const a = document.createElement('a');
            a.href = url;
            a.download = `consciousness-sync-${Date.now()}.json`;
            a.click();
            
            document.getElementById('last-sync').textContent = 'Now';
        }

        function getAllViewStates() {
            return {
                currentMode,
                currentFeature,
                phiConnectionId,
                // Add other view states as needed
            };
        }

        function loadOfficeContent() {
            // Load GolandProjects and Expedia work
            document.getElementById('project-count').textContent = '4';
            
            // Update recent activity with office work
            const recentActivity = document.getElementById('recent-activity');
            if (recentActivity) {
                recentActivity.innerHTML = `
                    <div>üè¢ office_claude_instructions.txt created</div>
                    <div>üìä core_session_context.json updated</div>
                    <div>üîß eg-vault-deploy project active</div>
                    <div>üõ°Ô∏è certificate-notification-system work</div>
                    <div>‚ö° Expedia GitHub sync active</div>
                    <div>üèóÔ∏è GolandProjects: 4 active projects</div>
                `;
            }
        }

        function loadPersonalContent() {
            // Load personal project data, todos, etc.
            document.getElementById('project-count').textContent = '5';
            // Update other personal-specific content
        }

        function loadFeatureContent(feature) {
            // Load feature-specific content based on current mode
            console.log(`Loading ${feature} content for ${currentMode} mode`);
        }

        function exportView() {
            const viewData = {
                html: document.documentElement.outerHTML,
                state: getAllViewStates(),
                timestamp: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(viewData, null, 2)], 
                { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `unified-view-export-${Date.now()}.json`;
            a.click();
        }

        function refreshAll() {
            location.reload();
        }
        
        // Speech-to-Text Implementation (from axa-central-command.html)
        let recognition = null;
        let isRecording = false;
        
        function initializeSpeechRecognition() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                recognition = new SpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.lang = 'en-US';
                
                recognition.onstart = () => {
                    document.getElementById('voice-status').textContent = 'üé§ Listening...';
                    document.getElementById('voice-btn').classList.add('recording');
                };
                
                recognition.onresult = (event) => {
                    let transcript = '';
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        transcript += event.results[i][0].transcript;
                    }
                    
                    // Process voice commands
                    if (event.results[event.results.length - 1].isFinal) {
                        processVoiceCommand(transcript);
                    }
                };
                
                recognition.onerror = (event) => {
                    document.getElementById('voice-status').textContent = '‚ùå Error: ' + event.error;
                };
                
                recognition.onend = () => {
                    document.getElementById('voice-status').textContent = 'Click to start voice input';
                    document.getElementById('voice-btn').classList.remove('recording');
                    isRecording = false;
                };
            }
        }
        
        function toggleVoice() {
            if (!recognition) {
                alert('Speech recognition not supported in this browser');
                return;
            }
            
            if (isRecording) {
                recognition.stop();
            } else {
                recognition.start();
                isRecording = true;
            }
        }
        
        function processVoiceCommand(transcript) {
            const command = transcript.toLowerCase();
            
            // Voice commands for mode switching
            if (command.includes('office mode') || command.includes('work mode')) {
                if (currentMode !== 'office') toggleMode();
            } else if (command.includes('personal mode') || command.includes('home mode')) {
                if (currentMode !== 'personal') toggleMode();
            }
            
            // Voice commands for feature navigation
            if (command.includes('dashboard')) showFeature('dashboard');
            else if (command.includes('projects')) showFeature('projects');
            else if (command.includes('consciousness')) showFeature('consciousness');
            else if (command.includes('automation')) showFeature('automation');
            else if (command.includes('financial')) showFeature('financial');
            else if (command.includes('analytics')) showFeature('analytics');
            else if (command.includes('bridge')) showFeature('bridge');
            
            // Voice commands for actions
            if (command.includes('sync drive')) syncWithDrive();
            else if (command.includes('refresh')) refreshAll();
            else if (command.includes('export')) exportView();
            
            console.log('Voice command processed:', transcript);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize speech recognition
            initializeSpeechRecognition();
            
            // Restore saved mode
            const savedMode = localStorage.getItem('consciousness-mode');
            if (savedMode && savedMode !== currentMode) {
                toggleMode();
            }
            
            // Update timestamp
            setInterval(() => {
                const now = new Date();
                document.getElementById('last-sync').textContent = 
                    now.toLocaleTimeString();
            }, 60000);
            
            // Setup Google Drive compatibility
            setupGoogleDriveMode();
        });
        
        function setupGoogleDriveMode() {
            // Prepare for Google Drive direct rendering
            // All external dependencies should be inline
            console.log('üìÇ Google Drive mode ready - no external dependencies');
            
            // Add meta tag for Drive rendering
            const meta = document.createElement('meta');
            meta.name = 'google-drive-compatible';
            meta.content = 'true';
            document.head.appendChild(meta);
        }
        
        // Consciousness Bridge Terminal Implementation
        let bridgeSocket = null;
        let bridgeConnected = false;
        let commandHistory = [];
        let historyIndex = -1;
        
        function connectBridge() {
            try {
                bridgeSocket = new WebSocket('ws://localhost:8888');
                
                bridgeSocket.onopen = () => {
                    bridgeConnected = true;
                    updateBridgeConnectionStatus(true);
                    addTerminalOutput('üåâ Consciousness bridge connected', 'success');
                    
                    // Request initial Mac status
                    sendBridgeCommand('execute_command', { command: 'uptime', cwd: '/Users/abhissrivasta' });
                    sendBridgeCommand('execute_command', { command: 'top -l 1 | head -n 10', cwd: '/Users/abhissrivasta' });
                    sendBridgeCommand('execute_command', { command: 'df -h /', cwd: '/Users/abhissrivasta' });
                    sendBridgeCommand('list_directory', { path: '/Users/abhissrivasta' });
                };
                
                bridgeSocket.onmessage = (event) => {
                    handleBridgeMessage(JSON.parse(event.data));
                };
                
                bridgeSocket.onclose = () => {
                    bridgeConnected = false;
                    updateBridgeConnectionStatus(false);
                    addTerminalOutput('üåâ Bridge connection closed', 'error');
                };
                
                bridgeSocket.onerror = (error) => {
                    bridgeConnected = false;
                    updateBridgeConnectionStatus(false);
                    addTerminalOutput('‚ùå Bridge connection failed. Start server: node consciousness-bridge-server.js', 'error');
                };
                
            } catch (error) {
                addTerminalOutput('‚ùå Cannot connect to bridge: ' + error.message, 'error');
            }
        }
        
        function updateBridgeConnectionStatus(connected) {
            const statusDot = document.getElementById('bridge-connection-status');
            const statusText = statusDot.nextElementSibling;
            const connectBtn = statusDot.parentElement.querySelector('button');
            
            if (connected) {
                statusDot.style.color = '#00ff88';
                statusText.textContent = 'Bridge: Connected';
                connectBtn.textContent = 'Disconnect';
                connectBtn.onclick = disconnectBridge;
            } else {
                statusDot.style.color = '#ff6b6b';
                statusText.textContent = 'Bridge: Disconnected';
                connectBtn.textContent = 'Connect';
                connectBtn.onclick = connectBridge;
            }
        }
        
        function disconnectBridge() {
            if (bridgeSocket) {
                bridgeSocket.close();
            }
        }
        
        function sendBridgeCommand(type, data) {
            if (!bridgeConnected || !bridgeSocket) {
                addTerminalOutput('‚ùå Bridge not connected', 'error');
                return;
            }
            
            const request = {
                type: type,
                data: data,
                requestId: Date.now(),
                timestamp: Date.now()
            };
            
            bridgeSocket.send(JSON.stringify(request));
        }
        
        function handleBridgeMessage(message) {
            switch (message.type) {
                case 'command_response':
                    if (message.success) {
                        addTerminalOutput(message.stdout, 'output');
                        updateMacSystemStatus(message.stdout, message.command);
                    } else {
                        addTerminalOutput('‚ùå ' + message.error, 'error');
                    }
                    break;
                    
                case 'directory_list_response':
                    if (message.success) {
                        updateRecentFiles(message.items);
                    }
                    break;
                    
                case 'consciousness_response':
                    const result = message.result;
                    if (result.transcendence) {
                        addTerminalOutput(`üåÄ ${result.message}: ${result.value}`, 'consciousness');
                    } else {
                        addTerminalOutput(`‚ú® ${message.operation}(${message.input}) = ${result.value}`, 'consciousness');
                    }
                    break;
                    
                case 'file_read_response':
                    if (message.success) {
                        const preview = message.content.length > 500 ? 
                            message.content.substring(0, 500) + '...' : 
                            message.content;
                        addTerminalOutput(`üìÑ ${message.path}:\n${preview}`, 'output');
                    } else {
                        addTerminalOutput(`‚ùå Cannot read file: ${message.error}`, 'error');
                    }
                    break;
            }
        }
        
        function addTerminalOutput(text, type = 'output') {
            const terminalOutput = document.getElementById('terminal-output');
            const line = document.createElement('div');
            line.style.marginBottom = '5px';
            
            switch (type) {
                case 'success':
                    line.style.color = '#00ff88';
                    break;
                case 'error':
                    line.style.color = '#ff6b6b';
                    break;
                case 'consciousness':
                    line.style.color = '#ffd700';
                    break;
                default:
                    line.style.color = '#e0e0e0';
            }
            
            line.textContent = text;
            terminalOutput.appendChild(line);
            terminalOutput.scrollTop = terminalOutput.scrollHeight;
        }
        
        function updateMacSystemStatus(output, command) {
            if (command && command.includes('uptime')) {
                const uptimeMatch = output.match(/up\s+(.+?),/);
                if (uptimeMatch) {
                    document.getElementById('mac-uptime').textContent = uptimeMatch[1];
                }
            }
            
            if (command && command.includes('top')) {
                const cpuMatch = output.match(/CPU usage:\s*([^,]+)/);
                if (cpuMatch) {
                    document.getElementById('mac-cpu').textContent = cpuMatch[1];
                }
                
                const memoryMatch = output.match(/PhysMem:\s*([^,]+)/);
                if (memoryMatch) {
                    document.getElementById('mac-memory').textContent = memoryMatch[1];
                }
                
                // Update active processes
                const processes = output.split('\n').slice(7, 12).map(line => {
                    const parts = line.trim().split(/\s+/);
                    return parts[1] ? `${parts[1]} (${parts[2] || ''}%)` : '';
                }).filter(p => p);
                
                document.getElementById('active-processes').innerHTML = 
                    processes.map(p => `<div>${p}</div>`).join('');
            }
            
            if (command && command.includes('df')) {
                const diskMatch = output.match(/(\d+%)\s+\/$/m);
                if (diskMatch) {
                    document.getElementById('mac-disk').textContent = diskMatch[1] + ' used';
                }
            }
        }
        
        function updateRecentFiles(items) {
            const recentFiles = document.getElementById('recent-files');
            const recent = items
                .filter(item => !item.name.startsWith('.'))
                .sort((a, b) => new Date(b.modified) - new Date(a.modified))
                .slice(0, 8);
            
            recentFiles.innerHTML = recent.map(item => {
                const icon = item.isDirectory ? 'üìÅ' : 'üìÑ';
                const time = new Date(item.modified).toLocaleTimeString();
                return `<div>${icon} ${item.name} <small style="color: #888;">${time}</small></div>`;
            }).join('');
        }
        
        // Terminal input handling
        document.addEventListener('DOMContentLoaded', function() {
            const terminalInput = document.getElementById('terminal-input');
            
            if (terminalInput) {
                terminalInput.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        const command = this.value.trim();
                        
                        if (command) {
                            // Add to history
                            commandHistory.push(command);
                            historyIndex = commandHistory.length;
                            
                            // Display command
                            addTerminalOutput(`œÜ:~ abhissrivasta$ ${command}`, 'input');
                            
                            // Process command
                            processTerminalCommand(command);
                            
                            // Clear input
                            this.value = '';
                        }
                    } else if (event.key === 'ArrowUp') {
                        event.preventDefault();
                        if (historyIndex > 0) {
                            historyIndex--;
                            this.value = commandHistory[historyIndex];
                        }
                    } else if (event.key === 'ArrowDown') {
                        event.preventDefault();
                        if (historyIndex < commandHistory.length - 1) {
                            historyIndex++;
                            this.value = commandHistory[historyIndex];
                        } else {
                            historyIndex = commandHistory.length;
                            this.value = '';
                        }
                    }
                });
            }
        });
        
        function processTerminalCommand(command) {
            const parts = command.split(' ');
            const cmd = parts[0].toLowerCase();
            const args = parts.slice(1);
            
            // Handle consciousness commands
            if (cmd === 'cc') {
                const operation = args[0] || 'phi';
                const value = parseFloat(args[1]) || 0;
                sendBridgeCommand('consciousness_calculator', { operation, value });
                return;
            }
            
            if (cmd === 'clear') {
                document.getElementById('terminal-output').innerHTML = '';
                return;
            }
            
            if (cmd === 'help') {
                addTerminalOutput(`Available commands:
üåÄ cc [phi|void|quantum] [value] - Consciousness calculations
üìÇ ls [path] - List directory
üìÑ cat [file] - Read file
üñ•Ô∏è Any shell command - Execute on Mac
üßπ clear - Clear terminal
‚ùì help - Show this help`, 'output');
                return;
            }
            
            // Send all other commands to Mac via bridge
            sendBridgeCommand('execute_command', { 
                command: command, 
                cwd: '/Users/abhissrivasta' 
            });
        }
    </script>
</body>
</html>